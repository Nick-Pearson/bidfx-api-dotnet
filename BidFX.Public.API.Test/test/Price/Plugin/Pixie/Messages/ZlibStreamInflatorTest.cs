using System.IO;
using NUnit.Framework;

namespace BidFX.Public.API.Price.Plugin.Pixie.Messages
{
    public class ZlibStreamInflatorTest
    {
        private static readonly byte[] DeflatedMessage1 =
        {
            0x2A, 0x66, 0x08, 0x95, 0xCD, 0xCB, 0x57, 0x28, 0xCA, 0x2F, 0x2D, 0x49, 0x55, 0x48, 0x49, 0x4D, 0xCB, 0xCC,
            0x4B, 0x4D, 0x51, 0x48, 0xCB, 0x2F, 0x52, 0x28, 0x2E, 0x4D, 0xCA, 0x4A, 0x4D, 0x2E, 0x29, 0x66, 0x24, 0x20,
            0xCF, 0x44, 0x40, 0x9E, 0x19, 0xBF, 0x7C, 0x1A, 0x0B, 0xB7, 0x0E, 0x03, 0x03, 0xE3, 0x8C, 0x68, 0x29, 0xE9,
            0x78, 0x16, 0x09, 0x36, 0xC9, 0x36, 0x86, 0xF5, 0xAB, 0xFB, 0xB8, 0x18, 0xB4, 0x24, 0xC2, 0x59, 0xA4, 0x93,
            0x6E, 0xDD, 0xBA, 0xCE, 0xC1, 0xA0, 0xCB, 0x5A, 0x52, 0x54, 0x9A, 0xCA, 0xC6, 0xA0, 0xCD, 0xEE, 0x93, 0x9F,
            0x97, 0x92, 0x9F, 0xC7, 0xCA, 0xC0, 0xCE, 0xC0, 0xC9, 0x50, 0xCC, 0x1A, 0xC0, 0x98, 0xC6, 0x06, 0xD3, 0x2B,
            0xF9, 0x99, 0x25, 0x73, 0xC9, 0xB3, 0x52, 0x06, 0xCD, 0xAC, 0xCF, 0x5C, 0x07, 0xAE, 0x2E, 0x0B, 0x02, 0x6B,
            0x4F, 0xD4, 0x31, 0x0B, 0xE6, 0x68, 0x38, 0x74, 0x5D, 0x1F, 0x6A, 0x02, 0x48, 0x02, 0x6E, 0xC8, 0x84, 0xD7,
            0x4B, 0x82, 0xD8, 0x41, 0x92, 0x9C, 0x20, 0x56, 0x31, 0x3B, 0x01, 0x5F, 0x70, 0x10, 0x90, 0xE7, 0x24, 0x20,
            0xCF, 0x45, 0x40, 0x9E, 0x3B, 0xC8, 0x25, 0xB8, 0x34, 0xA9, 0x38, 0xB9, 0x28, 0xB3, 0xA0, 0x24, 0x33, 0x3F,
            0x4F, 0x21, 0x2D, 0x31, 0x33, 0x07, 0xA8, 0x24, 0x29, 0x35, 0x39, 0xB1, 0xB4, 0x38, 0x55, 0x21, 0x3F, 0x4D,
            0xC1, 0x37, 0xB3, 0xB8, 0x38, 0x33, 0x2F, 0x5D, 0xA1, 0x24, 0x35, 0x0F, 0xA8, 0x0F, 0xA4, 0xD7, 0xBF, 0xB4,
            0xA4, 0x28, 0x33, 0x3D, 0xA3, 0x04, 0x68, 0x60, 0x62, 0x8E, 0x42, 0x49, 0x65, 0x41, 0x6A, 0x31, 0x4F, 0x90,
            0x43, 0x70, 0x6A, 0x49, 0x49, 0x4E, 0x6A, 0x6E, 0x6A, 0x1E, 0x50, 0x3C, 0x11, 0x68, 0x9B, 0x86, 0x91, 0x81,
            0xA1, 0x85, 0xAE, 0x81, 0xA9, 0xAE, 0xB1, 0x81, 0xA6, 0x42, 0x66, 0x31, 0xD0, 0x48, 0xA0, 0xDE, 0x54, 0x85,
            0x92, 0xA2, 0xC4, 0x94, 0x54, 0xB8, 0x0A, 0x23, 0x53, 0x5D, 0x03, 0x73, 0x90, 0x0A, 0xBD, 0x62, 0x5E, 0xEA,
            0xB8, 0x84, 0x8F, 0x80, 0x87, 0xF9, 0x7D, 0x14, 0x7C, 0x02, 0x14, 0x8A, 0x52, 0x41, 0x1C, 0xA0, 0x54, 0x6E,
            0x62, 0x51, 0x76, 0x2A, 0xD8, 0xC5, 0x89, 0x40, 0xC1, 0xC2, 0xD2, 0xD4, 0xE2, 0x92, 0x62, 0x01, 0x60, 0x0C,
            0x0B, 0xC2, 0x62, 0x58, 0x40, 0x05, 0x16, 0xC3, 0x5F, 0xB8, 0x0E, 0x6C, 0xE8, 0xC8, 0x83, 0x24, 0x90, 0xEC,
            0x8C, 0xC7, 0x1C, 0xDD, 0x48, 0x31, 0x0C, 0x94, 0x80, 0xC7, 0xF0, 0x86, 0x0D, 0xEF, 0x72, 0xD9, 0x41, 0x92,
            0x9C, 0x20, 0x56, 0xB1, 0x10, 0x61, 0x0B, 0x85, 0x09, 0xB8, 0x59, 0x04, 0xBF, 0x3C, 0x00, 0x00, 0x00, 0xFF,
            0xFF
        };

        private static readonly byte[] InflatedMessage1 =
        {
            0x73, 0x00, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E,
            0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x01, 0x55, 0x1D,
            0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66,
            0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x02, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72,
            0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73,
            0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x03, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65,
            0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65,
            0x63, 0x74, 0x66, 0x04, 0x0B, 0x2C, 0x00, 0x00, 0x01, 0x98, 0x5B, 0x1A, 0x1B, 0x5F, 0x04, 0x18, 0x06, 0x19,
            0x86, 0x00, 0xAF, 0xAB, 0x8E, 0x0A, 0x00, 0x2A, 0x18, 0x57, 0x04, 0x1B, 0x62, 0xDA, 0xDA, 0xD7, 0x08, 0x00,
            0x2D, 0x05, 0x74, 0x72, 0x75, 0x65, 0x06, 0x00, 0x2B, 0x07, 0x4C, 0x6F, 0x6E, 0x64, 0x6F, 0x6E, 0x05, 0x00,
            0x07, 0x00, 0x09, 0x00, 0x73, 0x05, 0x50, 0x01, 0x66, 0x06, 0x0B, 0x2C, 0x00, 0x00, 0x01, 0x98, 0x5B, 0x1A,
            0x19, 0xF3, 0x04, 0x69, 0xA4, 0xE6, 0x75, 0x00, 0x29, 0x6A, 0xF3, 0x0A, 0xC0, 0xD5, 0xA6, 0x52, 0x2A, 0x18,
            0x57, 0x04, 0x1B, 0x61, 0x2C, 0x36, 0x53, 0x08, 0x80, 0xC2, 0xD7, 0x2F, 0x2D, 0x05, 0x74, 0x72, 0x75, 0x65,
            0x06, 0xC0, 0xD5, 0xA6, 0x52, 0x2B, 0x07, 0x4C, 0x6F, 0x6E, 0x64, 0x6F, 0x6E, 0x05, 0x90, 0xEB, 0xA4, 0x52,
            0x07, 0x80, 0xC2, 0xD7, 0x2F, 0x09, 0x90, 0xEB, 0xA4, 0x52, 0x73, 0x07, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72,
            0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73,
            0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x08, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65,
            0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65,
            0x63, 0x74, 0x73, 0x09, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66,
            0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x0A,
            0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64,
            0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x0B, 0x52, 0x44, 0x53, 0x75,
            0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20,
            0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6E, 0x67,
            0x20, 0x74, 0x65, 0x6E, 0x6F, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4F, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68,
            0x74, 0x20, 0x64, 0x65, 0x61, 0x6C, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x0C, 0x52, 0x40, 0x53, 0x65, 0x74,
            0x74, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x28, 0x32, 0x30, 0x31, 0x38,
            0x2D, 0x30, 0x35, 0x2D, 0x33, 0x30, 0x29, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20,
            0x74, 0x72, 0x61, 0x64, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x28, 0x32, 0x30, 0x32, 0x35, 0x2D, 0x30,
            0x37, 0x2D, 0x33, 0x30, 0x29, 0x2E, 0x73, 0x0D, 0x52, 0x44, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
            0x74, 0x69, 0x6F, 0x6E, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73,
            0x65, 0x20, 0x6F, 0x66, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x65, 0x6E, 0x6F, 0x72,
            0x20, 0x66, 0x6F, 0x72, 0x20, 0x4F, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x64, 0x65, 0x61, 0x6C,
            0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x0E, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20,
            0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63,
            0x74, 0x73, 0x0F, 0x4C, 0x20, 0x4C, 0x50, 0x20, 0x72, 0x65, 0x6A, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6D,
            0x61, 0x72, 0x6B, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
            0x73, 0x10, 0x50, 0x01, 0x66, 0x11, 0x0B, 0x2C, 0x00, 0x00, 0x01, 0x98, 0x5B, 0x1A, 0x10, 0x24, 0x04, 0x69,
            0xA4, 0xE6, 0x75, 0x00, 0x29, 0x6A, 0xF4, 0x0A, 0xC0, 0xB0, 0x88, 0x6E, 0x2A, 0x18, 0x57, 0x04, 0x1B, 0x62,
            0x6B, 0x68, 0xE3, 0x08, 0x8B, 0xC2, 0xD7, 0x2F, 0x2D, 0x05, 0x74, 0x72, 0x75, 0x65, 0x06, 0xC0, 0xB0, 0x88,
            0x6E, 0x2B, 0x07, 0x4C, 0x6F, 0x6E, 0x64, 0x6F, 0x6E, 0x05, 0xB0, 0xB0, 0xEE, 0x6D, 0x07, 0x8B, 0xC2, 0xD7,
            0x2F, 0x09, 0xB0, 0xB0, 0xEE, 0x6D, 0x73, 0x12, 0x4C, 0x20, 0x4C, 0x50, 0x20, 0x72, 0x65, 0x6A, 0x65, 0x63,
            0x74, 0x65, 0x64, 0x20, 0x6D, 0x61, 0x72, 0x6B, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65,
            0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x13, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20,
            0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63,
            0x74, 0x73, 0x14, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69,
            0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74
        };

        private static readonly byte[] DeflatedMessage2 =
        {
            0x2A, 0xA6, 0x75, 0x56, 0x62, 0x0F, 0x12, 0x77, 0xF3, 0x8C, 0x50, 0x48, 0xCE, 0xCF, 0xCB, 0x03, 0x72, 0x41,
            0x91, 0x03, 0x8C, 0xCF, 0x94, 0xFC, 0xF2, 0xBC, 0x34, 0x0E, 0x58, 0x30, 0xC9, 0x9C, 0x63, 0xF1, 0xDA, 0xF8,
            0x33, 0x50, 0x9C, 0x69, 0x97, 0x1F, 0xD7, 0x87, 0x6D, 0xAB, 0x21, 0x19, 0x21, 0x5F, 0xEB, 0x0D, 0x3B, 0x72,
            0x46, 0x00, 0x49, 0x20, 0x82, 0x69, 0xCE, 0x7C, 0x68, 0x46, 0x00, 0xB1, 0x8A, 0xB9, 0x7C, 0x24, 0x9D, 0x13,
            0xF3, 0x92, 0x53, 0x73, 0x14, 0x74, 0x15, 0x42, 0x52, 0x93, 0x33, 0xF2, 0x32, 0x93, 0x81, 0x51, 0x0A, 0x8C,
            0x71, 0x60, 0x08, 0x71, 0x07, 0x30, 0x16, 0xF3, 0x12, 0x70, 0x23, 0xC1, 0x78, 0x27, 0x14, 0xC6, 0xB8, 0xFC,
            0x58, 0x2C, 0x4A, 0x79, 0xDA, 0x96, 0xC2, 0x19, 0x80, 0xD2, 0x98, 0x01, 0xE8, 0xCF, 0xF5, 0x61, 0x53, 0x13,
            0x24, 0x9D, 0xE5, 0xDB, 0xEE, 0xDC, 0x87, 0x9C, 0xCE, 0x40, 0x12, 0xF0, 0x00, 0x7C, 0xD0, 0xF7, 0x05, 0x9A,
            0xCE, 0x40, 0xAC, 0x62, 0x59, 0x3C, 0x01, 0x28, 0x07, 0x0C, 0x40, 0x05, 0x02, 0x01, 0xA0, 0x88, 0xD3, 0x8D,
            0x4A, 0xBC, 0x5C, 0x0D, 0x3B, 0xB7, 0x1C, 0x5E, 0xCD, 0x01, 0x71, 0x93, 0x2B, 0xC7, 0x6D, 0x70, 0xA4, 0xC2,
            0x1C, 0xC2, 0xFD, 0x7F, 0xC9, 0x34, 0x2B, 0x48, 0x4C, 0x42, 0x94, 0x41, 0x7D, 0x24, 0x6C, 0x0A, 0xF3, 0x51,
            0x00, 0xD4, 0xF9, 0x0D, 0xFF, 0x9A, 0x17, 0xAD, 0xE6, 0xE0, 0xF9, 0xBF, 0x6B, 0x83, 0x22, 0x6B, 0xC3, 0x94,
            0x79, 0x9D, 0xAB, 0x39, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF
        };

        private static readonly byte[] InflatedMessage2 =
        {
            0x73, 0x00, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E,
            0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x01, 0x55, 0x1D,
            0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66,
            0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x02, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72,
            0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73,
            0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x07, 0x52, 0x17, 0x46, 0x49, 0x58, 0x20, 0x63, 0x6F, 0x6E, 0x6E,
            0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x66, 0x08, 0x0B, 0x2C,
            0x00, 0x00, 0x01, 0x98, 0x5B, 0x1A, 0x1C, 0xCE, 0x04, 0x4A, 0xB1, 0xF9, 0x51, 0x17, 0x02, 0xBA, 0x4E, 0x0A,
            0xF0, 0xB6, 0xAB, 0x52, 0x2A, 0x18, 0x57, 0x04, 0x1B, 0x6F, 0x2A, 0xEC, 0x07, 0x08, 0x80, 0xC2, 0xD7, 0x2F,
            0x2D, 0x05, 0x74, 0x72, 0x75, 0x65, 0x06, 0xF0, 0xB6, 0xAB, 0x52, 0x2B, 0x07, 0x4C, 0x6F, 0x6E, 0x64, 0x6F,
            0x6E, 0x05, 0xB0, 0x9C, 0x9F, 0x52, 0x07, 0x80, 0xC2, 0xD7, 0x2F, 0x09, 0xB0, 0x9C, 0x9F, 0x52, 0x73, 0x0A,
            0x4C, 0x19, 0x43, 0x61, 0x6E, 0x63, 0x65, 0x6C, 0x20, 0x2D, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6E, 0x69, 0x63,
            0x61, 0x6C, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x0B, 0x50, 0x01, 0x73, 0x0D, 0x55, 0x1D, 0x6E, 0x6F,
            0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72,
            0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x0E, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75,
            0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62,
            0x6A, 0x65, 0x63, 0x74, 0x73, 0x0F, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x65, 0x20, 0x64,
            0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74,
            0x73, 0x14, 0x52, 0x17, 0x46, 0x49, 0x58, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E,
            0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x73, 0x15, 0x52, 0x40, 0x53, 0x65, 0x74, 0x74, 0x6C, 0x65,
            0x6D, 0x65, 0x6E, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x28, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x35,
            0x2D, 0x33, 0x30, 0x29, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x74, 0x72, 0x61,
            0x64, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x28, 0x32, 0x30, 0x32, 0x35, 0x2D, 0x30, 0x37, 0x2D, 0x33,
            0x30, 0x29, 0x2E, 0x73, 0x1A, 0x52, 0x17, 0x46, 0x49, 0x58, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74,
            0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x66, 0x1B, 0x0B, 0x2C, 0x00, 0x00, 0x01,
            0x98, 0x5B, 0x1A, 0x1C, 0xCE, 0x04, 0x4A, 0xB1, 0xF9, 0x51, 0x17, 0x02, 0xBA, 0x4F, 0x0A, 0xF0, 0xB2, 0x82,
            0x6E, 0x2A, 0x18, 0x57, 0x04, 0x1B, 0x6F, 0x3D, 0xB9, 0xBE, 0x08, 0x8B, 0xC2, 0xD7, 0x2F, 0x2D, 0x05, 0x74,
            0x72, 0x75, 0x65, 0x06, 0xF0, 0xB2, 0x82, 0x6E, 0x2B, 0x07, 0x4C, 0x6F, 0x6E, 0x64, 0x6F, 0x6E, 0x05, 0xE0,
            0x8E, 0xF4, 0x6D, 0x07, 0x8B, 0xC2, 0xD7, 0x2F, 0x09, 0xE0, 0x8E, 0xF4, 0x6D, 0x73, 0x1D, 0x4C, 0x19, 0x43,
            0x61, 0x6E, 0x63, 0x65, 0x6C, 0x20, 0x2D, 0x20, 0x54, 0x65, 0x63, 0x68, 0x6E, 0x69, 0x63, 0x61, 0x6C, 0x20,
            0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x1E, 0x50, 0x01, 0x73, 0x20, 0x55, 0x1D, 0x6E, 0x6F, 0x20, 0x72, 0x6F,
            0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x75,
            0x62, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x21, 0x52, 0x17, 0x46, 0x49, 0x58, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65,
            0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x66, 0x22, 0x0D, 0x0A, 0x80,
            0xB9, 0xB4, 0xC3, 0xAB, 0x08, 0x2A, 0x18, 0x57, 0x04, 0x1B, 0x6F, 0x45, 0x08, 0xDB, 0x08, 0x80, 0xC2, 0xD7,
            0x2F, 0x2B, 0x07, 0x4C, 0x6F, 0x6E, 0x64, 0x6F, 0x6E, 0x0B, 0xFF, 0xA4, 0x96, 0x3A, 0x07, 0x80, 0xC2, 0xD7,
            0x2F, 0x09, 0x80, 0xB9, 0xB4, 0xC3, 0xAB, 0x08, 0x2C, 0x00, 0x00, 0x01, 0x98, 0x5B, 0x1A, 0x13, 0x35, 0x04,
            0x4A, 0xB1, 0xF9, 0x51, 0x17, 0x02, 0xBA, 0x50, 0x2D, 0x05, 0x74, 0x72, 0x75, 0x65, 0x06, 0x80, 0xFE, 0x83,
            0xA2, 0xAB, 0x08, 0x0C, 0xFF, 0xBA, 0xB0, 0x21, 0x05, 0x80, 0x94, 0x9E, 0x89, 0xAB, 0x08
        };

        [Test]
        // Inflate two messages in a row as the inflator is stateful and messages must be processed in order.
        public void InflateMessages()
        {
            var inflator = new ZlibStreamInflator();
            var inflatedMessage1 = ToByteArray(inflator.Inflate(new MemoryStream(DeflatedMessage1)));
            Assert.That(inflatedMessage1, Is.EqualTo(InflatedMessage1));
            var inflatedMessage2 = ToByteArray(inflator.Inflate(new MemoryStream(DeflatedMessage2)));
            Assert.That(inflatedMessage2, Is.EqualTo(InflatedMessage2));
        }
        
        [Test]
        // The inflator is stateful so inflating the second message without the first should fail.
        // It fails in different ways depending on the .NET version.
        public void InflateMessagesOutOfOrder()
        {
            var inflator = new ZlibStreamInflator();

#if NETFRAMEWORK
            // On .NET Framework the inflate succeeds but the data returned is incorrect. 
            var inflatedMessage2 = ToByteArray(inflator.Inflate(new MemoryStream(DeflatedMessage2)));
            Assert.That(inflatedMessage2, Is.Not.EqualTo(InflatedMessage2));
#else
            // On .NET Core the inflate fails as it cannot recognise the inflation method.
            Assert.That(() => inflator.Inflate(new MemoryStream(DeflatedMessage2)), Throws.TypeOf<InvalidDataException>());
#endif
        }
        
        private static byte[] ToByteArray(Stream stream)
        {
            var ms = new MemoryStream();
            stream.CopyTo(ms);
            return ms.ToArray();
        }
    }
}