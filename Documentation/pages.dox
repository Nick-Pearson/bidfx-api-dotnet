#############INTRODUCTION#############
/*! \mainpage Introduction
This API is used to connect client .NET applications to TradingScreen's fixed income price services.

The package TS.Pisa.FI contains all of the classes, methods and events to:
<ul>
<li>Create a connection to our pricing services</li>
<li>Subscribe to a price update from our pricing services</li>
<li>Receive status and price updates on each subscription to our pricing services</li>
<li>Unsubscribe from price updates from out pricing services</li>
</ul>
The package TS.Pisa contains some supporting classes such as Enums and Price Maps which you will need to take action on data sent to you.
 */

#############GUIDES ON USAGE#############
/** \page guides Guides on Usage
\tableofcontents
This document will provide you with guides on how to use the Pisa .Net Fixed Income API.

\section connecting Connecting to our Pricing Services
When creating a new FixedIncomeSession you must provide some variables before starting the session, the table below details these variables:
<table>
	<tr>
		<th>Name</th>
		<th>Description</th>
		<th>Type</th>
		<th colspan="1">Required</th>
		<th>Default Value</th>
	</tr>
	<tr>
		<td>Host</td>
		<td>The host you wish to connect to</td>
		<td>string</td>
		<td colspan="1" style="text-align: center;">Y</td>
		<td style="text-align: center;">-</td>
	</tr>
	<tr>
		<td>Port</td>
		<td>The port number on which to connect</td>
		<td>int</td>
		<td colspan="1" style="text-align: center;">Y</td>
		<td style="text-align: center;">443</td>
	</tr>
	<tr>
		<td>Tunnel</td>
		<td>Whether the connection will Tunnel or not</td>
		<td>bool</td>
		<td colspan="1" style="text-align: center;">Y</td>
		<td style="text-align: center;">true</td>
	</tr>
	<tr>
		<td>Username</td>
		<td>The username you wish to connect with</td>
		<td>string</td>
		<td colspan="1" style="text-align: center;">Y</td>
		<td style="text-align: center;">-</td>
	</tr>
	<tr>
		<td colspan="1">Password</td>
		<td colspan="1">The password you wish to connect with</td>
		<td colspan="1">string</td>
		<td colspan="1" style="text-align: center;">Y</td>
		<td colspan="1" style="text-align: center;">-</td>
	</tr>
</table>
Once all your parameters have been entered correctly you can start up the session by calling the method Start(). This will initiate the connection to our Price Services and await subscriptions from you.

If for any reason you would like to close the session, you may do so by calling Stop() at any point. For example:
\code
//Create the session.
var session = new FixedIncomeSession
{
	Host = "ny-tunnel.qadev.tradingscreen.com",
	Username = "some_username",
	Password = "some_password"
};

//Start the session.
session.Start();

//Stop the session.
session.Stop();
\endcode


\section subscribe Subscribing and Unsubscribing from Instruments
To subscribe or unsubscribe from prices you must first create a FixedIncomeSubject, passing in two variables as defined below:
<table>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Required</th>
    </tr>
    <tr>
      <td>Venue</td>
      <td>string</td>
      <td style="text-align: center;">Y</td>
    </tr>
    <tr>
      <td>ISIN</td>
      <td>string</td>
      <td style="text-align: center;">Y</td>
    </tr>
</table>
You may then use this FixedIncomeSubject to call the Subscribe and Unsubscribe methods of your session variable. For example:
\code
//Create the subject.
var subject = new FixedIncomeSubject("some_venue", "some_isin");
 
//Subscribe to the subject.
session.Subscribe(subject);
 
//Unsubscribe from the subject.
session.Unsubscribe(subject);
\endcode
If a subscription comes back with a negative status, the API will resubscribe to it periodically until either you unsubscribe or we receive a positive status or a price update.


\section listen_price Listening to Price Updates
To subscribe to price updates, you must create a method to handle the event. The method signature should be as follows:
<BLOCKQUOTE>
\<access specifier\> \<static\> void OnPriceUpdate(object source, PriceUpdateEventArgs priceEvent)
</BLOCKQUOTE>
You can also unsubscribe from price updates if you are so inclined. For example:
\code
//Subscribe to price updates.
session.OnPrice += OnPriceUpdate;
 
//Create a handler for the price updates.
private void OnPriceUpdate(object source, PriceUpdateEventArgs priceEvent)
{
    var price = priceEvent.AllPriceFields;
    var bid = price.DecimalField(FieldName.Bid) ?? 0.0m;
    var ask = price.DecimalField(FieldName.Ask) ?? 0.0m;
    var spread = ask - bid;
    Console.WriteLine(priceEvent.Subject.Isin + " bid=" + bid + " ask=" + ask + " (spread=" + spread + ")");
}
 
//Unsubscribe from price updates.
session.OnPrice -= OnPriceUpdate;
\endcode


\section listen_status Listening to Price Status Updates
To subscribe to status updates, you must create a method to handle the event. The method signature should be as follows:
<BLOCKQUOTE>
\<access specifier\> \<static\> void OnStatusUpdate(object source, SubscriptionStatusEventArgs statusEvent)
</BLOCKQUOTE>
You can also unsubscribe from status updates if you are so inclined. For example:
\code
//Subscribe to status updates.
session.OnStatus += OnStatusUpdate;
 
//Create a handler for the status updates.
private void OnStatusUpdate(object source, SubscriptionStatusEventArgs statusEvent)
{
    Console.WriteLine(statusEvent.Subject.Isin + " " + statusEvent.Status + " - " + statusEvent.Reason);
}
 
//Unsubscribe from status updates.
session.OnStatus -= OnStatusUpdate;
\endcode


\section data_price Getting data from a Price Update
Upon receiving a price update in the form of PriceUpdateEventArgs, you'll want to access the data inside of it, of which there are three objects:
<ol>
  <li>A FixedIncomeSubject for you to know what instrument you have received an update for</li>
  <li>An IPriceMap called AllPriceFields - this contains every price field for that instrument</li>
  <li>An IPriceMap called ChangedPriceFields - this contains only fields which have changed since the last price update for that instrument</li>
</ol>

\subsection fixedincomesubject Accessing data from the FixedIncomeSubject
For a fixed income subject to be valid it must have a Venue and an ISIN set. Therefore you will always get a value back when you retrieve these two variables.

You can access them like so:
\code
//Your handler for price updates
private void OnPriceUpdate(object source, PriceUpdateEventArgs priceEvent)
{
	var subject = priceEvent.Subject;
	var venue = subject.Venue;
	var isin = subject.Isin;
}
\endcode

\subsection ipricemap Accessing data from an IPriceMap
An IPriceMap can contain multiple fields - all of which are defined in the FieldName class as strings.

With an IPriceMap you can get all of the field names in that map, a map of the field, or you can get a specific field if you provide a field name. For example:
\code
//Your handler for price updates
private void OnPriceUpdate(object source, PriceUpdateEventArgs priceEvent)
{
	//You can get either AllPriceFields or ChangedPriceFields - for the purpose of this example I will get AllPriceFields
	var price = priceEvent.AllPriceFields;
	
	//To get all the field names in this as strings you can call
	var allFieldNames = price.FieldNames;
 
	//To get a map of the field values you can call
	var allPriceFields = price.PriceFields;
 
	//To get a specific field you can call
	var bid = price.Field(FieldName.Bid); //This will return an IPriceField containing the value or null if that value was not in the price fields
 
	//We have also included an easy way to get specific types from the price fields, for example
	var ask = price.DecimalField(FieldName.Ask); //This will return a decimal value if it exists or null if not
	//Similar methods to this include price.LongField, price.IntField and price.StringField
}
\endcode


\section data_status Getting data from a Status Update
Upon receiving a status update in the from of SubscriptionStatusEventArgs, you'll want to access the data inside of it, of which there are three objects:
<ol>
  <li>A FixedIncomeSubject for you to know what instrument you have received a status update for</li>
  <li>A PriceStatus containing the status of the given instrument</li>
  <li>A string containing the reason of the change in status</li>
</ol>
The data can be accessed as follows:
\code
//Your handler for status updates
private void OnStatusUpdate(object source, SubscriptionStatusEventArgs statusEvent)
{	
	var subject = priceEvent.Subject;
	var venue = subject.Venue;
	var isin = subject.Isin;
	var status = priceEvent.Status;
	var reason = priceEvent.Reason;
}
\endcode
*/